openapi: 3.0.3
info:
  title: "Social Media Apps"
  description: "Project 1 Group 5 Social Media Apps"
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/aziz-wahyudin/Social-Media-Apps/1.0.0
  - url: "localhost:8000" # perlu diubah menyesuaikan dengan host domain
    description: "link project"
tags:
  - name: Users
  - name: Authentication
  - name: Posts 
  - name: Comments 
paths:
#++++++++++++++++++++
# Authentication
#++++++++++++++++++++
  /login:
    post:
      tags:
        - "Authentication"
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  password:
                    type: string
                    format: password
              example:
                username: aziz123
                password: 123456789
      responses:
        '200':
          description: "login success"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "login success"
                data:
                  username: "aziz123"
                  token: "12jfoajfidaskudsghusdhfijijwiruijagjidf"

        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
#++++++++++++++++++++
# Users
#++++++++++++++++++++
  /users:
    post:
      tags:
        - "Users"
      summary: "Registration feature for user"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              $ref: "#/components/schemas/RegistrationObject"
            example:
              username: "aziz123"
              email: "azizw@duck.com"
              password: "123456789"
              photo: aziz123.jpg      
      responses:
        '201':
          description: "success create account"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "success register account"
                data:
                  id: 2
                  username: "aziz123"
                  email: "azizw@duck.com"
                  password: "123456789"
                  photo: aziz123.jpg
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  # /users/{id}:
  #   get:
  #     parameters:
  #     - in: path
  #       name: id
  #       required: true
  #       schema:
  #         type: integer
  #     tags:
  #       - "User"
  #     summary: "Show user data based on user id"
  #     responses:
  #       '200':
  #         description: "Succes get user data"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               $ref: "#/components/schemas/UserObject"
  #             example:
  #               message: "success get user"
  #               data:
  #                 id: 1
  #                 nama: "Jerry"
  #                 hp: "081234"
  #       '400':
  #         $ref: "#/components/responses/400"
  #       '500':
  #         $ref: "#/components/responses/500"
  /users/me:
    put:
      tags:
        - "Users"
      summary: "Update user profile by account owner"
      security:
        - JWTAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              $ref: "#/components/schemas/RequestUpdate"
            example:
              username: "aziz123"
              email: "azizw@duck.com"
              password: "123456789"
              photo: aziz123.jpg  
      responses:
        '201':
          description: "success update user"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ResponseObject"
              example:
                message: "success update user"
                data:
                  id: 2
                  username: "aziz123"
                  email: "azizw@duck.com"
                  password: "123456789"
                  photo: aziz123.jpg  
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"

    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
      tags:
        - "Users"
      summary: Delete by id
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized
#++++++++++++++++++++
# Posts
#++++++++++++++++++++

  /post:
    get:
      tags:
        - "Post"
      summary: "shows all post"
      responses:
        '200':
          description: "Success get all post"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/ResponseArray"
              example:
                message: "success get all post"
                data:
                  - id: 1
                    content: "#spoileronepiece1064"
                    created_at: "2022-10-17 10:24:17"
                    owner: aziz123
                  - id: 2
                    content: "#spoilerkaguya-sama"
                    created_at: "2022-10-18 10:24:17"
                    owner: aziz123
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"

    post:
      tags:
        - "Post"
      summary: "Add new post"
      security:
        - JWTAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PostContent"
      responses:
        '201':
          description: "succsess created post"
          content:
            application/json:
              schema: 
                type: object
                $ref: "#/components/schemas/ResponsePost"
              example:
                message: "succes post a post"
                data: 
                  id: 2
                  content: "#onepiece1064spoiler ...."
                  username: "aziz123"
                  created_at: "2022-10-17 10:24:17"
                  updated_at: "2022-10-18 10:24:17"
                  deleted_at:



        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"


#++++++++++++++++++++
# Components
#++++++++++++++++++++
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserObject:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        photo:
          type: string
    RegistrationObject:
      type: object
      properties:
        id: 
          type: integer
        username:
          type: string
        email: 
          type: string
        password:
          type: string
          minLength: 4
        photo:
          type: string
    RequestUpdate:
      type: object
      properties:
        username:
          type: string
        email: 
          type: string
        password:
          type: string
        photo:
          type: string
    RequestContent:
      type: object
      properties:
        content:
          type: string 
    ResponsePost:
      type: object
      properties:
        id: 
          type: integer
        content:
          type: string
        username:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    ResponseObject:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
    ResponseArray:
      type: object
      properties:
        message: 
          type: string
        data:
          type: array
  requestBodies:
    PostContent:
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/RequestContent"
  
  responses:
    '200':
      description: "login succes"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "login success"
    '400':
      description: "error from user"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "cannot process data, invalid input from user"
    '401':
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "unauthorized access"
    '500':
      description: "error from server"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "cannot process data, something wrong on server"